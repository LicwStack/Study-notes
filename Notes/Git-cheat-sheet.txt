GitHub

GIT速查表

	Git是一个开源的分布式版本控制系统，这个系统可以帮助GitHub在笔记本电脑、台式机上的工作。为了快速查阅，这个速查表总结了常用的Git命令。

安装GIT
	GitHub提供桌面客户端，包括给多数常用仓库操作的一个可视化用户接口和一个面向高级用户使用的自动更新的命令行编辑器。
 
Windows下安装Git
https://windows.github.com

Mac下安装Git
https://mac.github.com

对于Linux和POSIX系统，Git官网配置源可用。

所有平台安装Git
https://git-scm.com

配置工具
对本地仓库配置用户信息
----------------------------------------------------
$ git config --global user.name "[name]"
设置你想附加的名字到提交事件
----------------------------------------------------
$ git config --global user.email "[email address]"
设置你想附加的邮箱到提交事件
----------------------------------------------------
$ git config --global color.ui auto
启用命令行输出的帮助性着色
----------------------------------------------------


创建仓库
开始一个新仓库或着从已存在的URL获得
----------------------------------------------------
$ git init [project-name]
指定名称创建一个新的本地仓库
----------------------------------------------------
$ git clone [url]
下载项目和其全部版本历史记录
----------------------------------------------------


进行更改
回顾编辑和制作一个提交事件
----------------------------------------------------
$ git status
列出所有新建和修改的待提交文件
----------------------------------------------------
$ git diff
显示尚未暂存的文件区别
----------------------------------------------------
$ git add [file]
添加进行版本控制的文件快照
----------------------------------------------------
$ git diff --staged
显示暂存区与最近提交版本的文件区别
----------------------------------------------------
$ git reset [file]
缓存文件，但是保留其内容
----------------------------------------------------
$ git commit -m "[descriptive message]"
在版本历史中永久记录文件快照
----------------------------------------------------


小组更改
命名一系列提交记录，兼并已完成工作
----------------------------------------------------
$ git branch
在当前仓库列出所有本地分支
----------------------------------------------------
$ git branch [branch-name]
创建一个新的分支
----------------------------------------------------
$ git checkout [branch-name]
转换到特定分支并更新当前工作目录
----------------------------------------------------
$ git merge [branch]
兼并特定分支历史到当前分支
----------------------------------------------------
$ git branch -d [branch-name]
删除指定分支
----------------------------------------------------


重构文件名
迁移或删除版本控制文件
----------------------------------------------------
$ git rm [file]
从当前工作目录删除文件，暂存删除事件
----------------------------------------------------
$ git rm --cached [file]
从版本控制中删除文件但保留本地文件
----------------------------------------------------
$ git mv [file-original] [file-rename]
更改文件名，为提交做准备
----------------------------------------------------


阻止跟踪
排除临时文件和路径
----------------------------------------------------

*.log
build/
temp-*

一个命名为.gitignore文本文件通过匹配特定模式，阻止文件和路径的临时版本控制
----------------------------------------------------
$ git ls-files --other --ignored --exclude-standard
列出工程中所有忽略的文件
----------------------------------------------------


保存片段
搁置、恢复未完成的更改
----------------------------------------------------
$ git stash
暂存所有修改的跟踪文件
----------------------------------------------------
$ git stash pop
恢复到最近的中断文件
----------------------------------------------------
$ git stash list
列出所有中断变更集
----------------------------------------------------
$ git stash drop
丢弃最近中断变更集
----------------------------------------------------


回顾版本历史
浏览和查看工程文件变化
----------------------------------------------------
$ git log
列出当前分支的版本记录
----------------------------------------------------
$ git log --follow [file]
列出一个文件的版本历史，包括重命名
----------------------------------------------------
$ git diff [first-branch]...[second-branch]
显示两个分支不同的内容
----------------------------------------------------
$ git show [commit]
输出元数据和某一特定提交的变更内容
----------------------------------------------------


从新提交
擦除错误、制作替换历史记录
----------------------------------------------------
$ git reset [commit]
撤销[commit]之后的所有提交记录，保留本地更改
----------------------------------------------------
$ git reset --hard [commit]
丢弃所有历史记录，回退到某一指定提交记录
----------------------------------------------------


同步更改
注册一个仓库书签、交换版本更改记录
----------------------------------------------------
$ git fetch [bookmark]
从仓库书签下载所有历史记录
----------------------------------------------------
$ git merge [bookmark]/[branch]
兼并书签分支到当前的本地分支
----------------------------------------------------
$ git push [alias] [branch]
上传所有本地分支提交记录到GitHub
----------------------------------------------------
$ git pull
下载书签历史记录和合并更改
----------------------------------------------------


GitHub练习
	学习更多关于使用GitHub和Git。发送邮件给练习小组(training@github.com)或浏览我们的网站(training.github.com)了解事件计划表和可利用的私有类。
